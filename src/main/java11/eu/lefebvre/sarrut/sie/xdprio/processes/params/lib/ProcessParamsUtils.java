/*
 * Copyright Editions Lefebvre-Sarrut 2019
 */
package eu.lefebvre.sarrut.sie.xdprio.processes.params.lib;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

/**
 *
 * @author cmarchand
 */
public class ProcessParamsUtils {
    private Properties currentPP;
    private final DateTimeFormatter formatter;
    
    public ProcessParamsUtils() {
        super();
        formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
    }
    
    /**
     * Parse uri and returns ProcessParams
     * @param uri Parameters to parse
     * @return Parameters to use
     * @throws IOException In case of problem.
     */
    public static ProcessParams parseParameterFile(URI uri) throws IOException {
        File f = new File(uri);
        return parseParameterStream(new FileInputStream(f));
    }
    
    public static ProcessParams parseParameterStream(InputStream is) throws IOException {
        Properties props = new Properties();
        props.loadFromXML(is);
        ProcessParams ret = new ProcessParams();
        props.stringPropertyNames().forEach((key) -> {
            ret.setParameter(key, props.getProperty(key));
        });
        return ret;
    }
    
    public void newProcessParams() {
        currentPP = new Properties();
    }
    public void addParameter(String parameterName, String parameterValue) {
        currentPP.setProperty(parameterName, parameterValue);
    }
    public void serializeParams(URI uri) throws IOException {
        File f = new File(uri);
        OutputStream os = new FileOutputStream(f);
        serializeParams(os);
    }
    public void serializeParams(OutputStream os) throws IOException {
        Class ppuc = ProcessParamsUtils.class;
        String className = String.format("%s/%s", ppuc.getModule().getName(), ppuc.getName());
        currentPP.storeToXML(os, "Generated by "+className+" on "+formatter.format(OffsetDateTime.now()), Charset.forName("UTF-8"));
        currentPP=null;
    }
}
